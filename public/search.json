[{"title":"Clash自定义规则配置的一次记录","url":"/lilyblessing.github.io/2021/06/19/Clash%E8%87%AA%E5%AE%9A%E4%B9%89%E8%A7%84%E5%88%99%E9%85%8D%E7%BD%AE%E7%9A%84%E4%B8%80%E6%AC%A1%E8%AE%B0%E5%BD%95/","content":"Clash自定义规则配置前言体验了一段时间，Clash的分流功能很好用，而且用订阅转换可以很方便的把v2和ssr的订阅链接转换为clash使用。但是也存在一个痛点，个别网站的规则并没有收录于在线规则列表中，需要自己本地手动添加；而添加之后，每次更新订阅之前手动写入的规则就会被覆盖掉。本来打算在转换服务器中添加自定义规则，折腾一番发现clash客户端上自带这种功能。\n流程1. 写入自定义规则在Profiles页面找到需要加入特定规则的配置项，第三个图标即为编辑规则打开后会显示前一百条规则，点击左上角的add添加自定义规则DOMAIN-SUFFIX为一级域名匹配，如bilibili.com；DOMAIN为全域名匹配，如pan.baidu.com；DOMAIN-KEYWORD为域名关键词匹配，如baidu可以匹配pan.baidu.com也可以匹配www.baidu.com；编辑完毕后，点击右上角的Add加入规则集，然后点击右上角的Save写入磁盘。\n2. 获取自定义规则代码在Profiles页面找到刚刚加入特定规则的配置项，第一个图标&lt; &gt;即为打开规则文件。打开后按Ctrl+F搜索rules，即可定位指规则集部分。此时规则从第一行至  - DOMAIN-SUFFIX,acl4.ssr,🎯 全球直连的前一行为你的自定义规则条目，将其复制。\n3. 预处理自定义规则打开Clash - Settings - Profiles - Parsers - Edit打开预处理规则之前修改以下代码复制进去  \n\n这是单个配置文件的情况parsers: # array  - url: https://****.***/******  #将这些替换成你的订阅链接    yaml:      prepend-rules:        - DOMAIN-SUFFIX,****.com,🚀 节点选择  #将这些替换成你的规则        - DOMAIN-KEYWORD,****,🚀 节点选择\n如果有多个配置文件，并且订阅链接的域是一样的话，可以使用正则表达式parsers: # array  - reg: https://abcd.xyz.+$  #将abcd.xyz替换成你的订阅链接的相同部分    yaml:      prepend-rules:        - DOMAIN-SUFFIX,****.com,🚀 节点选择  #将这些替换成你的规则        - DOMAIN-KEYWORD,****,🚀 节点选择\n\n点击右下角保存，然后去更新一下订阅的配置文件。可以点击editRules检查一下规则是否确实被写入了。\n4. 进阶配置这部分主要讲一些略微进阶的配置，具体都可以在github的clash项目wiki上查到。  \n配置dns方面：打开Clash的主界面 切换至**Settings选项卡，然后找到Profile Mixin选项，Type选择YAML，然后点击YAML行的edit  **输入以下代码并保存:  \nmixin: # object  dns:    enable: true    enhanced-mode: redir-host    nameserver:      - 114.114.114.114      - 223.5.5.5      - 1.2.4.8      - tls://dns.rubyfish.cn:853      - https://dns.alidns.com/dns-query    fallback:      - tls://1.0.0.1:853      - tls://8.8.4.4:853  tun:    enable: true    stack: gvisor    dns-hijack:      - 198.18.0.2:53    macOS-auto-route: true    macOS-auto-detect-interface: true\n\n这样就配置好了\n\n添加负载均衡组：打开Clash的主界面 切换至**Settings选项卡，然后找到Profiles下的Parsers选项，然后点击edit**自行更改以下代码保存：\nparsers: #   - reg: https://****.***/******  #将这些替换成你的订阅链接    yaml:      append-proxy-groups:  #添加自定义负载均衡组        - name: 🔮 HK负载均衡          type: load-balance          url: http://www.gstatic.com/generate_204          interval: 180          proxies:            - DIRECT        - name: 🔮 TW负载均衡          type: load-balance          url: http://www.gstatic.com/generate_204          interval: 180          proxies:            - DIRECT      prepend-rules:  #添加自定义规则        - DOMAIN-SUFFIX,****.com,🚀 节点选择         - DOMAIN-KEYWORD,****,🚀 节点选择\t      commands:        - proxy-groups.🔮 HK负载均衡.proxies=[]proxyNames|HK|香港 # 向🔮 HK负载均衡策略组添加所有定义的节点名，并按“HK|香港”正则表达式过滤        - proxy-groups.🔮 TW负载均衡.proxies=[]proxyNames|台湾 # 向🔮 HK负载均衡策略组添加所有定义的节点名，并按“台湾”正则表达式过滤        - proxy-groups.🚀 节点选择.proxies.8+🔮 HK负载均衡 # 向🚀 节点选择策略组添加组名🔮 HK负载均衡 proxies.8是从指 节点选择 组中从0开始数的第八位 这里意思是在第八位插入这个🔮 HK负载均衡组        - proxy-groups.🚀 节点选择.proxies.9+🔮 TW负载均衡 # 向🚀 节点选择策略组添加组名🔮 TW负载均衡\n修改保存后，更新订阅就能看到新加入的负载均衡组了。\n这里介绍一下clash的几种策略组：策略组有：延迟最低、故障转移、手动选择、负载均衡 四种模式。\n\n延迟最低：url-test，也就是自动选择默认组，顾名思义，每隔一段时间进行延迟测试，选择延时最低的节点。他有几个参数我稍微提一下\nurl:http://www.gstatic.com/generate_204 这里是指延迟测试的网站，一般保持默认即可\ninterval: 300 这里是指自动测试、切换节点的间隔时间 如果觉得每次切换太慢，可以适当调整\ntolerance: 50 容忍度，指测试出来一组节点中，延迟相差不太大的时候怎么处理；比如容忍度50，当前选择节点150ms，节点测速中只有更进一步低于50，也就是小于100ms时才会切换节点，避免频繁切换造成连接打断\n\n\n故障转移：每次都选组内的第一个节点，如果无法使用在切到第二个，依此类推。\n手动选择：字面意思，自己手选点一个\n负载均衡：每次连接都随机到组里挑一个节点，如果那个节点故障了，就再随机挑一个；所以也有自动选择组中的一些参数。\n\n\n以上，暂时先讲这么多；后续还有啥没说的话，就想起来了再补。\n\n"},{"title":"Youtube直播录制与下载的配置记录","url":"/lilyblessing.github.io/2021/07/05/Youtube%E7%9B%B4%E6%92%AD%E5%BD%95%E5%88%B6%E4%B8%8E%E4%B8%8B%E8%BD%BD%E7%9A%84%E9%85%8D%E7%BD%AE%E8%AE%B0%E5%BD%95/","content":"前言由于平常看的一些youtuber的直播或者歌回容易触发youtube版权大棒，导致无法留档；由此萌生了在个人VPS上部署实时录制youtube直播和youtube视频下载的工具。\n\n所需的工具和项目\n录制工具: liverecord  \n下载工具: youtube-dl  \n下载工具: you-get \n\n直播录制部署安装这里用的是Liverecord这个脚本,安装以centOS为例:\n# 首先安装自动录制脚本mkdir record wget -O &quot;record/record_new.sh&quot; &quot;https://github.com/lovezzzxxx/liverecord/raw/master/record_new.sh&quot; chmod +x record/record_new.sh# 然后编译安装ffmpeg# 编译耗时较长,建议使用screen或者Tmux等工具放入后台运行git clone https://git.ffmpeg.org/ffmpeg.git ffmpegcd ffmpeg./configuremakemake installcp ffmpeg /usr/bin/ffmpeg# 安装Streamlinkpip3 install streamlink# 安装rclone 用于配置上传curl https://rclone.org/install.sh | sudo bash# 配置rclone  具体配置看其他教程rclone config\n\n配置使用# 使用方法cd record./record_new.sh [-参数 值] 频道类型 频道号码# 使用默认值进行录制./record_new.sh youtube &quot;UCJABeTIKrhExlG6tBTov_ZA&quot;\n\n\n\n参数\n默认值\n作用\n\n\n\n–nico-id\n无\nnico用户名\n\n\n–nico-psw\n无\nnico密码\n\n\n–you-cookies\n无\nyoutube监测cookies文件,需要配合–you-config参数使用\n\n\n–you-config\n无\nyoutube录制配置文件,仅支持youtube频道类型\n\n\n–bili-config\n无\nbilibili录制配置文件,仅bilibili频道类型\n\n\n–bili-cookies\n无\nbilibili录制cookies文件,仅支持bilibiliy频道类型\n\n\n–bili-proxy\n无\nbilibili录制代理\n\n\n–bili-proxy-url\n无\nbilibili录制代理获取链接\n\n\n-f/–format\nbest\n清晰度\n\n\n-p/–part-time\n0\n分段时间，0为不分段\n\n\n-l/–loop-interval\n60\n检测间隔\n\n\n-ml/–min-loop-interval\n180\n最短录制间隔\n\n\n-ms/–min-status\n1\n开始录制前需要持续检测到开播次数\n\n\n-o/-d/–output/–dir\nrecord_video/other\n输出目录\n\n\n-u/–upload\n无\n上传网盘,格式为网盘类型重试次数:盘符:路径，网盘类型支持rclone paidupcs onedrive，例如rclone3:vps:record\n\n\n-dt/–delete-type\n1\n删除本地录像需要成功上传的数量，默认为1，del为强制删除，keep为强制保留，all为需要全部上传成功\n\n\n-e/–except\n无\n排除转播，格式同录制频道，如-e youtube “UCWCc8tO-uUl_7SJXIKJACMw\n\n\n# 使用自定义参数进行录制./record_new.sh --you-cookies &quot;you-cookies.txt&quot; --you-config &quot;you-config.txt&quot; -f best -l 300 -o &quot;record_video/blanc&quot; -u rclone3:vps:data youtube &quot;UCJABeTIKrhExlG6tBTov_ZA&quot;# 使用youtubeCookie录制最高清晰度，在直播间间隔300秒检测一次是否开播；# 将文件输出至当前目录的record_video/blanc文件夹下；# 录制完毕后上传至rclone配置的vps主机内的data文件夹下，如果失败，自动重试3次。\n由于会一直占用终端, 建议配合screen或Tmux使用\n\n录播下载Youtube的下载工具主流就那几种windows平台可以使用浏览器脚本配合idm下载, linux则可以使用youtube-dl或者you-get。\n部署安装以下以CentOS为例\n# 安装youtube dlyum install youtube-dl# 或者pip install --upgrade youtube-dl# 或者curl https://yt-dl.org/latest/youtube-dl -o /usr/local/bin/youtube-dl# 安装you-getpip3 install you-get\n\n配置使用# Youtube-dl 最简单的使用方式,默认直接放youtube地址youtube-dl https://www.youtube.com/watch?v=iKCQ5fyEpU8# 或者也可以设置清晰度之类的参数youtube-dl https://www.youtube.com/watch?v=iKCQ5fyEpU8 -F# -F 查看所有清晰度,格式 -f 根据编号选择清晰度格式youtube-dl https://www.youtube.com/watch?v=iKCQ5fyEpU8 -f best# 可以直接设置best,直接下载油管推荐的当前清晰度最好的音视频轨合一文件# 但是best无法下载2K4K以上的高清视频,可以将音视频轨分开下载youtube-dl https://www.youtube.com/watch?v=iKCQ5fyEpU8 -f bestvideo[height=1440]+bestaudio# 这个例子为同时下载限定视频轨清晰度高度最高为1440(也就是2K清晰度)加上音质最好的音频轨文件# 然后调用ffmpeg合并\n每次下载都要手动添加这一串配置实在是太麻烦了，所以我们可以添加一个配置文件。Linux的配置文件应该放在/etc/youtube-dl.conf下,如何编写可以参考官网给出的配置。以下是我的示例,仅供参考\n# Lines starting with # are comments # Use this proxy--proxy 127.0.0.1:1089 # Save all videos under Movies directory in your home directory-o /home/data/Download/%(title)s.%(ext)s # Use this prefix for unqualified URLs.# For example &quot;gvsearch2:&quot; downloads two# videos from google videos for youtube-# dl &quot;large apple&quot;. Use the value &quot;auto&quot;# to let youtube-dl guess (&quot;auto_warning&quot;# to emit a warning when guessing).# &quot;error&quot; just throws an error. The# default value &quot;fixup_error&quot; repairs# broken URLs, but emits an error if this# is not possible instead of searching.--default-search &quot;ytsearch&quot; # Keep the video file on disk after the# post-processing; the video is erased by# default--keep-video# 设置下载视频的默认画质-f bestvideo[height=1440]+bestaudio\n设置好配置文件后，以后就直接下载就行了, 到这里就全部完成了\n"},{"title":"二刺螈萌豚的萌萌图收藏方案","url":"/lilyblessing.github.io/2021/06/20/%E4%BA%8C%E5%88%BA%E8%9E%88%E8%90%8C%E8%B1%9A%E7%9A%84%E8%90%8C%E8%90%8C%E5%9B%BE%E6%94%B6%E8%97%8F%E6%96%B9%E6%A1%88/","content":"肥肥的仓鼠向冻鳗图片处理流程前言每一个喜爱冻鳗游戏的二刺螈肥肥大概都有收集二刺螈萌色图的爱好；俺们二刺螈萌豚一看到萌色图，当场就走不动道了。那么我在此简要的分享下本肥肥的处理流程（进入贤者模式\n1. 所需的工具与项目\n浏览器（推荐Chrome、Edge等chromium内核浏览器，以下均按Edge浏览器配置）\nTampermonkey（类似的）脚本管理器\nEverything 强大的文件索引工具\nHoneyview 简约而不简单的图片浏览工具\nWaifu2x-Extension-GUI Waifu2x基于机器学习的图片近似无损放大工具\nDuplicate photo Finder plus 快速高效的图片去重工具\n\n\n2. 获取来源1. pixiv 日系插画站 深得画师们钟爱 萌豚最主要的色图来源  \n\n如果你恰好有安装过aria2这款下载引擎的话对应的pixiv下载脚本是PixivUserBatchDownload\n如果你没有安装过aria2也不要紧（现在装上也来得及 分别是前后端的Aria2 For Edge和Morix）当然不装也可以 Pixiv专用的下载工具是pixiv-omina \n\n2. twitter 全球最大社交网站之一 关注画师就能第一时间获取各种色图  \n\n推特这边的下载采用浏览器扩展 twitter-media-downloader\n\n3. telegram 图片频道+万能的群友=车来！简单介绍几个图站频道\n\nPIXIV站每日 Top50搬运\nDanbooru【SFW】\nDanbooru【NSFW】\nYandere 【SAFE】\nYandere【NSFW】如上所示Yandere和Danbooru这种图站由于有爬虫自动传telegram就不单独介绍了\n\n3. 整理与筛选不管是Pixiv还是Twitter，找画师空间批量爬取下载之后的图片一定是良莠不齐的这时就需要一个好用的图片文件浏览工具和查看工具了  \n1. Everything作为远超windows文件检索性能的索引工具，仅仅用作图片浏览工具也是非常不错的可以限定大小进行筛选，例：筛选大于1MB的图片可以限定方向筛选，例：筛选所有竖向的图片可以方便的搜索作品ID或者搜索画师作品，例：搜索torino老师的作品\n当然Everything本身并不是仅仅用来处理图片的，还有更多进阶用法，可以自行学习(也许我可能大概应该会单独写一篇讲解Everything的进阶操作，当然更可能直接摸了\n\n2. 蜂蜜浏览器 Honeyview专业的图片查看工具还支持双开页和文件夹跳转，可以作为漫画阅读器\n\n3. Duplicate photo Finder如果你还同时下载了telegram图片频道的合集包，那么就有可能出现部分图片重复用这软件处理图片快速去重，效率很高哦\n\n整理完可以使用Waifu2x对色图进行近似无损放大与降噪，这里使用带图形化界面的Waifu2x-Extension-GUI简单易上手就不多赘述了\n4. 备份与存档当你做完这一系列操作会发现也许可能你的硬盘的空间突然就吃紧了，这时候就该准备上传云盘了首先排除百度云，国内的网盘可以选择万年没翻车的115，也可以选择打着 上传下载不限速 口号的阿里云进行存储海外的云空间可以选择Onedrive和GoogleDrive这种成熟的商业网盘当然，如果你足够Rich也可以选择直接本地局域网搭建一个NAS作为永久存储，堆积你所珍爱的色图们\n\n至此你已经算是一只合格的肥肥仓鼠啦 该摸啦\n"},{"title":"密码管理工具KeePass的使用心得","url":"/lilyblessing.github.io/2021/07/07/%E5%AF%86%E7%A0%81%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7KeePass%E7%9A%84%E4%BD%BF%E7%94%A8%E5%BF%83%E5%BE%97/","content":"前言关于密码的管理，以前一直用的chrome浏览器自带的密码管理功能；但总有一些网站在注册时，chrome做不到智能的识别，这时就需要人自己现场编一个密码并且记住；这样做带来的后果就是密码的重复度会很高，而且容易遗忘、管理困难。同时，现场编密码对于一个有起名困难症的人来说是一种煎熬。(咕,杀了我吧)在饱受自己想密码的苦痛折磨后，我开始寻找一款合适的密码管理工具，然后我发现了KeePass。这是一款跨平台开源免费的密码管理工具。\n\n所需的工具和项目\n软件本体 KeePass\nChrome浏览器扩展 Kee - Password Manager\nChrome扩展的辅助插件 KeePassRPC\n安卓端同步管理工具 Keepass2Android\n同步数据库用网盘 随意 我的选择是 OneDrive 免费个人同步空间5G足够使用\n\n使用流程Windows端下载软件后，打开软件，可以先点【Cancel】取消。不去新建数据库，我们把界面先汉化了再说。\n汉化首先我们先处理界面语言，按Alt+V+L可以打开语言选择界面对话框 。点击左下方的【获取更多语言…】选择简体中文语言文件下载，点击【打开文件夹】将刚刚下载的语言文件放入，然后重启软件切换语言。\n新建数据库新建数据库，可以将数据库文件存放在Onedrive网盘的同步目录下，方便后期多终端调用。设置数据库密码，可以同时使用三种密码验证方案；密码、密钥验证与win账号验证是AND关系，缺一不可。如果同时勾选三种验证，那么只要有一个验证不通过就打不开数据库，更安全但是不太方便，一般我们使用密码验证就可以了。然后使用默认配置，点【OK】即可注意，数据库密码一定要牢记，如果不放心可以在这一步选择打印（没有打印机就找个小本本写上你的数据库密码，其实有了密码管理工具只需要记一个主密码应该还是不难的），一般这里选择跳过即可。至此已经可以使用本软件生成随机密码。Ctrl+i可以直接新增一条记录，Ctrl+S保存。当然仅仅是装好软件还是不太够的；平常最主要的使用场景是浏览器使用和移动端使用。\n浏览器扩展浏览器扩展的安装与配置安装浏览器扩展后，下载辅助插件，将其放入Keepass的插件文件夹，按Alt+T+P可以打开【插件管理器】，点击【打开文件夹】可以打开插件文件夹，将下载的RPC放入，重启软件。当软件重启完成浏览器会自动开始接入数据库，输入KeePass本体弹出的验证窗口中的红色代码即可确认链接。链接成功后浏览器扩展会提示选择使用【新的数据库】还是使用【现有数据库】，这里选择现有数据库至此浏览器扩展就安装完成了。\n浏览器扩展的使用方法当我们再某个网站注册或者输入信息登陆以后，可以点击浏览器扩展Kee的图标，弹出创建记录的对话框这里点一下【+】创建新记录，会自动将刚刚输入的表单数据填上；这里删掉验证码的那行表单，然后点【NEXT】。然后选择一个群组路径保存这条信息记录，这里我选择放在我创建的【网站账号】群组中，点击【保存】这样下次打开网站需要登陆的时候，点一下登陆的框框旁的Kee图标，就可以看到上次记录的信息了。\n同步此时，由于新增记录，数据库中已经存在改动，Onedrive会自动上传你的改动；但如果在其他终端(比如手机)也做了改动，OneDrive就会判断文件出现冲突无法完成合并。此时，可以通过选择【文件】–&gt;【同步】–&gt;【与文件同步…】，选择Onedrive中的同步文件，【同步】合并数据改动。\n\nWindows端还有其他功能，比如软件界面的自动填充也可以配置这里就不过多赘述，请读者自行摸索。\nAndroid端Android端的选择是Keepass2Android，打开之前Onedrive中同步的数据库文件即可。在手机的系统设置中搜索自动填充服务，设定为Keepass2Android即可接管手机的密码填充。记得加入电池优化白名单。至此结束。\n\n"},{"title":"搭建订阅转换服务的一次记录","url":"/lilyblessing.github.io/2021/06/18/%E6%90%AD%E5%BB%BA%E8%AE%A2%E9%98%85%E8%BD%AC%E6%8D%A2%E6%9C%8D%E5%8A%A1%E7%9A%84%E4%B8%80%E6%AC%A1%E8%AE%B0%E5%BD%95/","content":"订阅转换服务前言笔者用的几个机场分别采用了ssr和v2的订阅方案，而这几个客户端无论是win平台还是Android平台，切换起来都太麻烦了；刚好clash现在已经支持ssr了，就打算全部移至clash平台使用。  虽然机场主有提供订阅转换服务，但用公共服务还是多少有点不爽的，于是决定自建一个。\n准备工作\n一台用于安装服务的VPS\ncloudflare托管好的域名\n\n所用到的项目\n前端项目Sub-Web\n后端项目Subconverter\n\n部署流程1. 在cloudflare做好域名解析(记得打开橙色的小云朵,也就是CDN)\n\n前端域名sub.xxxx.com\n后端域名suc.xxxx.com\n\n\n2. 部署前端\n安装开发环境curl -sL https://rpm.nodesource.com/setup_12.x | bash -sudo yum install -y nodejswget https://dl.yarnpkg.com/rpm/yarn.repo -O /etc/yum.repos.d/yarn.repoyum -y install yarn\n确认版本node -vyarn -v\n拉取 sub-webgit clone https://github.com/CareyWang/sub-web.git &amp;&amp; cd sub-web\n构建依赖项yarn install\n本地开发试运行yarn serve\n防火墙打开8080端口,便可访问http://服务器ip:8080/ 预览确认\n修改配置文件打开/root/sub-web/src/views/Subconverter.vue文件搜索backendOptions: 约在第258行 将http://127.0.0.1:25500/sub?替换为之前cf解析的域名https://suc.xxxx.com/sub?注意这里填写的是后端域名\n更换远程规则打开/root/sub-web/src/views/Subconverter.vue,也就是刚刚那个文件搜索remoteConfig: [，回车一行，复制下方规则粘贴空行&#123;  label: &quot;ACL4SSR&quot;,  options: [    &#123;      label: &quot;ACL4SSR_Online 默认版 分组比较全 (与Github同步)&quot;,      value:        &quot;https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/config/ACL4SSR_Online.ini&quot;    &#125;,    &#123;      label: &quot;ACL4SSR_Online_AdblockPlus 更多去广告 (与Github同步)&quot;,      value:        &quot;https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/config/ACL4SSR_Online_AdblockPlus.ini&quot;    &#125;,    &#123;      label: &quot;ACL4SSR_Online_NoAuto 无自动测速 (与Github同步)&quot;,      value:        &quot;https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/config/ACL4SSR_Online_NoAuto.ini&quot;    &#125;,    &#123;      label: &quot;ACL4SSR_Online_NoReject 无广告拦截规则 (与Github同步)&quot;,      value:        &quot;https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/config/ACL4SSR_Online_NoReject.ini&quot;    &#125;,    &#123;      label: &quot;ACL4SSR_Online_Mini 精简版 (与Github同步)&quot;,      value:        &quot;https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/config/ACL4SSR_Online_Mini.ini&quot;    &#125;,    &#123;      label: &quot;ACL4SSR_Online_Mini_AdblockPlus.ini 精简版 更多去广告 (与Github同步)&quot;,      value:        &quot;https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/config/ACL4SSR_Online_Mini_AdblockPlus.ini&quot;    &#125;,    &#123;      label: &quot;ACL4SSR_Online_Mini_NoAuto.ini 精简版 不带自动测速 (与Github同步)&quot;,      value:        &quot;https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/config/ACL4SSR_Online_Mini_NoAuto.ini&quot;    &#125;,    &#123;      label: &quot;ACL4SSR_Online_Mini_Fallback.ini 精简版 带故障转移 (与Github同步)&quot;,      value:        &quot;https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/config/ACL4SSR_Online_Mini_Fallback.ini&quot;    &#125;,    &#123;      label: &quot;ACL4SSR_Online_Mini_MultiMode.ini 精简版 自动测速、故障转移、负载均衡 (与Github同步)&quot;,      value:        &quot;https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/config/ACL4SSR_Online_Mini_MultiMode.ini&quot;    &#125;,    &#123;      label: &quot;ACL4SSR_Online_Full 全分组 重度用户使用 (与Github同步)&quot;,      value:        &quot;https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/config/ACL4SSR_Online_Full.ini&quot;    &#125;,    &#123;      label: &quot;ACL4SSR_Online_Full_NoAuto.ini 全分组 无自动测速 重度用户使用 (与Github同步)&quot;,      value:        &quot;https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/config/ACL4SSR_Online_Full_NoAuto.ini&quot;    &#125;,    &#123;      label: &quot;ACL4SSR_Online_Full_AdblockPlus 全分组 重度用户使用 更多去广告 (与Github同步)&quot;,      value:        &quot;https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/config/ACL4SSR_Online_Full_AdblockPlus.ini&quot;    &#125;,    &#123;      label: &quot;ACL4SSR_Online_Full_Netflix 全分组 重度用户使用 奈飞全量 (与Github同步)&quot;,      value:        &quot;https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/config/ACL4SSR_Online_Full_Netflix.ini&quot;    &#125;,    &#123;      label: &quot;ACL4SSR 本地 默认版 分组比较全&quot;,      value: &quot;config/ACL4SSR.ini&quot;    &#125;,    &#123;      label: &quot;ACL4SSR_Mini 本地 精简版&quot;,      value: &quot;config/ACL4SSR_Mini.ini&quot;    &#125;,    &#123;      label: &quot;ACL4SSR_Mini_NoAuto.ini 本地 精简版+无自动测速&quot;,      value: &quot;config/ACL4SSR_Mini_NoAuto.ini&quot;    &#125;,    &#123;      label: &quot;ACL4SSR_Mini_Fallback.ini 本地 精简版+fallback&quot;,      value: &quot;config/ACL4SSR_Mini_Fallback.ini&quot;    &#125;,    &#123;      label: &quot;ACL4SSR_BackCN 本地 回国&quot;,      value: &quot;config/ACL4SSR_BackCN.ini&quot;    &#125;,    &#123;      label: &quot;ACL4SSR_NoApple 本地 无苹果分流&quot;,      value: &quot;config/ACL4SSR_NoApple.ini&quot;    &#125;,    &#123;      label: &quot;ACL4SSR_NoAuto 本地 无自动测速 &quot;,      value: &quot;config/ACL4SSR_NoAuto.ini&quot;    &#125;,    &#123;      label: &quot;ACL4SSR_NoAuto_NoApple 本地 无自动测速&amp;无苹果分流&quot;,      value: &quot;config/ACL4SSR_NoAuto_NoApple.ini&quot;    &#125;,    &#123;      label: &quot;ACL4SSR_NoMicrosoft 本地 无微软分流&quot;,      value: &quot;config/ACL4SSR_NoMicrosoft.ini&quot;    &#125;,    &#123;      label: &quot;ACL4SSR_WithGFW 本地 GFW列表&quot;,      value: &quot;config/ACL4SSR_WithGFW.ini&quot;    &#125;  ]&#125;,\n打包发布先停止试运行站点Ctrl+C 然后开始打包程序（会消耗一会时间，建议开screen运行）cd sub-webyarn build\n执行完毕后，会在 /root/sub-web 下面会生成一个 dist 目录，这个目录即为网页的发布目录。\n放入网站目录配置SSL等（由于静态网页运行所以测试开的端口8080可以关闭了）\n\n\n3. 部署后端\n拉取后端程序cd /root/wget https://github.com/tindy2013/subconverter/releases/download/v0.6.3/subconverter_linux64.tar.gztar -zxvf subconverter_linux64.tar.gzcd subconverter/\n修改配置文件打开/root/subconverter/pref.ini文件 搜索配置项并修改api_access_token=123456789abcdefg     \t       #随意设置自己知道就行managed_config_prefix=https://suc.*******.com    #设置成我们刚刚解析的后端域名listen=127.0.0.1                  \t\t       #这里改成 127.0.0.1 进行反代port=25500 \t\t\t\t\t\t\t\t\t  #这里是后端要使用的端口号，随意更改，记得防火墙放行\n设置服务启动项打开/etc/systemd/system目录 创建sub.service文件 写入[Unit]Description=Subscription Convert APIAfter=network.target[Service]Type=simpleExecStart=/root/subconverter/subconverterWorkingDirectory=/root/subconverterRestart=alwaysRestartSec=10[Install]WantedBy=multi-user.target\n检查运行状态以及设置开机自启systemctl daemon-reloadsystemctl start subsystemctl enable subsystemctl status sub\n然后为后端域名设置反代localhost:25500(默认端口没改变的话)状态无误可访问域名 https://suc.*****.com/测试\n\n\n至此搭建完毕\n"},{"title":"配置Mosh的一次记录","url":"/lilyblessing.github.io/2021/06/17/%E9%85%8D%E7%BD%AEMosh%E7%9A%84%E4%B8%80%E6%AC%A1%E8%AE%B0%E5%BD%95/","content":"使用mosh来优化ssh连接笔者日常使用的是广电网，极其不稳定的网络连接导致一个网络波动就能掉线。由于SSH采用不可持续的连接，当网络出现波动时，SSH断开会导致当前正在运行的服务中断，对工作产生非常大的影响。无意间知道了Mosh这个东西，安装使用下，发现网络波动这种事情不会导致服务器连接断开了，特意查了下，原来Mosh使用的是UDP方式传输：虽然也支持使用SSH配置进行认证登录，但是数据传输本身是使用UDP方式的，Mosh支持在会话中断时，不会立即退出，而是启用一个计时器，当网络恢复后会自动连接，同时会延续之前的会话，不会重新开启一个。实在是帮大忙了。\n安装mosh1. 在服务器端安装安装以笔者使用的CentOS7系统为例\n$ yum install -y epel-release$ yum install -y mosh \n\nmosh使用的默认端口号UDP的60000-61000，很明显这个范围太大了，不合适也不安全。我们只放行60000-60010区间的udp端口即可。\n\n如果是iptables$ iptables -I INPUT 1 -p udp --dport 60000:60010 -j ACCEPT\n如果是firewall$ firewall-cmd --permanent --zone=public --add-port=60000-60010/udp\n\n2. 在客户端使用\n如果默认端口号22没有改变，则只需要将原ssh改为mosh，mosh会自动接管ssh的配置(因此原ssh所用的端口号不能关闭)\n\n$ mosh root@192.168.**.**\n\n\n如果ssh默认端口号改变了，就需要指定端口号，这里ssh端口号为123\n\n$ mosh --ssh=&quot;ssh -p 123&quot; root@192.168.**.**\n\n\n只开启了一个或者几个mosh端口，需要指定端口号mosh端口号\n\n$ mosh -p 60010 --ssh=&quot;ssh -p 123&quot; root@192.168.**.**\n\n\n不用密码使用秘钥登录 需要将服务器与本机的密钥的目录写好\n\nmosh -p 60010 --ssh=&quot;/usr/bin/ssh -i /home/ivo/.ssh/id_rsa&quot; root@192.168.**.**\n\n这里推荐一个终端 FluentTerminal这个终端采用fluent设计，界面很美观，而且原生支持mosh连接，感兴趣的朋友可以自行安装体验\n"},{"title":"配置tmux的一次记录","url":"/lilyblessing.github.io/2021/07/05/%E9%85%8D%E7%BD%AEtmux%E7%9A%84%E4%B8%80%E6%AC%A1%E8%AE%B0%E5%BD%95/","content":"Tmux的安装与配置记录Tmux是什么？Tmux 是一个终端复用器（terminal multiplexer），属于常用的开发工具，用于终端会话进程的配置与分离，也就是起到一个类似于虚拟终端的效果；类似功能的还有screen，这两个工具我都有在使用，我是由screen转到tmux的。\n什么是会话？命令行的典型使用方式是，打开一个终端窗口（terminal window，以下简称”窗口”），在里面输入命令。用户与计算机的这种临时的交互，称为一次”会话”（session） 。会话的一个重要特点是，窗口与其中启动的进程是连在一起的。打开窗口，会话开始；关闭窗口，会话结束，会话内部的进程也会随之终止，不管有没有运行完。一个典型的例子就是，SSH 登录远程计算机，打开一个远程窗口执行命令。这时，网络突然波动导致断线，再次登录的时候，是找不回上一次执行的命令的。因为上一次 SSH 会话已经终止了，里面的进程也随之消失了。为了解决这个问题，会话与窗口可以”解绑”：窗口关闭时，会话并不终止，而是在后台继续运行，等到以后需要的时候，再让会话”绑定”其他窗口。\nTmux 的作用Tmux 就是会话与窗口的”解绑”工具，将它们彻底分离。\n\n它允许在单个窗口中，同时访问多个会话。这对于同时运行多个命令行程序很有用。\n它可以让新窗口”接入”已经存在的会话。\n它允许每个会话有多个连接窗口，因此可以多人实时共享会话。\n它还支持窗口任意的垂直和水平拆分。\n\nScreen也是类似的作用，不过在细节方面Tmux更胜一筹；screen如果在一个窗口中再开窗口就会陷入嵌套窗口的状况，而Tmux则无这种特性。\nTmux的配置安装以CentOS为例\nsudo yum install tmux\n常用命令# 新建会话 tmux# 默认直接开启一个新的会话tmux new -s test# 新建一个名为test的会话# 脱离会话 一般是使用快捷键 ctrl+b  d (记得ctl+b完全松手后再按 d)tmux detach# 也可以直接输入 tmux detach进行分离# 查看所有会话tmux ls# 进入名为test的会话tmux a -t test# 这里的a其实是tmux attach-session，只是平常我们直接简写为a# 如果已经在窗口中 想要切换也可以直接 ctrl+b  s 进行选择 非常方便快捷# 重命名会话tmux rename-session -t 0 &lt;new-name&gt;# 或者ctrl+b $#退出删除会话exit# 或者ctrl + d# 列出快捷键tmux list-keys# 也可以在窗口中使用ctrl+b  ? "}]