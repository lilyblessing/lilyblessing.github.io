[{"title":"Clash自定义规则配置的一次记录","url":"/lilyblessing.github.io/2021/06/19/Clash%E8%87%AA%E5%AE%9A%E4%B9%89%E8%A7%84%E5%88%99%E9%85%8D%E7%BD%AE%E7%9A%84%E4%B8%80%E6%AC%A1%E8%AE%B0%E5%BD%95/","content":"Clash自定义规则配置前言体验了一段时间，Clash的分流功能很好用，而且用订阅转换可以很方便的把v2和ssr的订阅链接转换为clash使用。但是也存在一个痛点，个别网站的规则并没有收录于在线规则列表中，需要自己本地手动添加；而添加之后，每次更新订阅之前手动写入的规则就会被覆盖掉。本来打算在转换服务器中添加自定义规则，折腾一番发现clash客户端上自带这种功能。\n流程\n写入自定义规则在Profiles页面找到需要加入特定规则的配置项，第三个图标即为编辑规则打开后会显示前一百条规则，点击左上角的add添加自定义规则DOMAIN-SUFFIX为一级域名匹配，如bilibili.com；DOMAIN为全域名匹配，如pan.baidu.com；DOMAIN-KEYWORD为域名关键词匹配，如baidu可以匹配pan.baidu.com也可以匹配www.baidu.com；编辑完毕后，点击右上角的Add加入规则集，然后点击右上角的Save写入磁盘。\n\n获取自定义规则代码在Profiles页面找到刚刚加入特定规则的配置项，第一个图标&lt; &gt;即为打开规则文件。打开后按Ctrl+F搜索rules，即可定位指规则集部分。此时规则从第一行至  - DOMAIN-SUFFIX,acl4.ssr,🎯 全球直连的前一行为你的自定义规则条目，将其复制。\n\n预处理自定义规则打开Clash - Settings - Profiles - Parsers - Edit打开预处理规则之前修改以下代码复制进去\nparsers: # array  - url: https://****.***/******  #将这些替换成你的订阅链接  - url: https://****.***/******    yaml:      prepend-rules:        - DOMAIN-SUFFIX,****.com,🚀 节点选择  #将这些替换成你的规则        - DOMAIN-KEYWORD,****,🚀 节点选择\n点击右下角保存，然后去更新一下订阅的配置文件。可以点击editRules检查一下规则是否确实被写入了。\n\n\n"},{"title":"搭建订阅转换服务的一次记录","url":"/lilyblessing.github.io/2021/06/18/%E6%90%AD%E5%BB%BA%E8%AE%A2%E9%98%85%E8%BD%AC%E6%8D%A2%E6%9C%8D%E5%8A%A1%E7%9A%84%E4%B8%80%E6%AC%A1%E8%AE%B0%E5%BD%95/","content":"订阅转换服务前言笔者用的几个机场分别采用了ssr和v2的订阅方案，而这几个客户端无论是win平台还是Android平台，切换起来都太麻烦了；刚好clash现在已经支持ssr了，就打算全部移至clash平台使用。  虽然机场主有提供订阅转换服务，但用公共服务还是多少有点不爽的，于是决定自建一个。\n准备工作\n一台用于安装服务的VPS\ncloudflare托管好的域名\n\n所用到的项目\n前端项目Sub-Web\n后端项目Subconverter\n\n部署流程1. 在cloudflare做好域名解析(记得打开橙色的小云朵,也就是CDN)\n\n前端域名sub.xxxx.com\n后端域名suc.xxxx.com\n\n\n2. 部署前端\n安装开发环境curl -sL https://rpm.nodesource.com/setup_12.x | bash -sudo yum install -y nodejswget https://dl.yarnpkg.com/rpm/yarn.repo -O /etc/yum.repos.d/yarn.repoyum -y install yarn\n确认版本node -vyarn -v\n拉取 sub-webgit clone https://github.com/CareyWang/sub-web.git &amp;&amp; cd sub-web\n构建依赖项yarn install\n本地开发试运行yarn serve\n防火墙打开8080端口,便可访问http://服务器ip:8080/ 预览确认\n修改配置文件打开/root/sub-web/src/views/Subconverter.vue文件搜索backendOptions: 约在第258行 将http://127.0.0.1:25500/sub?替换为之前cf解析的域名https://suc.xxxx.com/sub?注意这里填写的是后端域名\n更换远程规则打开/root/sub-web/src/views/Subconverter.vue,也就是刚刚那个文件搜索remoteConfig: [，回车一行，复制下方规则粘贴空行&#123;  label: &quot;ACL4SSR&quot;,  options: [    &#123;      label: &quot;ACL4SSR_Online 默认版 分组比较全 (与Github同步)&quot;,      value:        &quot;https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/config/ACL4SSR_Online.ini&quot;    &#125;,    &#123;      label: &quot;ACL4SSR_Online_AdblockPlus 更多去广告 (与Github同步)&quot;,      value:        &quot;https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/config/ACL4SSR_Online_AdblockPlus.ini&quot;    &#125;,    &#123;      label: &quot;ACL4SSR_Online_NoAuto 无自动测速 (与Github同步)&quot;,      value:        &quot;https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/config/ACL4SSR_Online_NoAuto.ini&quot;    &#125;,    &#123;      label: &quot;ACL4SSR_Online_NoReject 无广告拦截规则 (与Github同步)&quot;,      value:        &quot;https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/config/ACL4SSR_Online_NoReject.ini&quot;    &#125;,    &#123;      label: &quot;ACL4SSR_Online_Mini 精简版 (与Github同步)&quot;,      value:        &quot;https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/config/ACL4SSR_Online_Mini.ini&quot;    &#125;,    &#123;      label: &quot;ACL4SSR_Online_Mini_AdblockPlus.ini 精简版 更多去广告 (与Github同步)&quot;,      value:        &quot;https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/config/ACL4SSR_Online_Mini_AdblockPlus.ini&quot;    &#125;,    &#123;      label: &quot;ACL4SSR_Online_Mini_NoAuto.ini 精简版 不带自动测速 (与Github同步)&quot;,      value:        &quot;https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/config/ACL4SSR_Online_Mini_NoAuto.ini&quot;    &#125;,    &#123;      label: &quot;ACL4SSR_Online_Mini_Fallback.ini 精简版 带故障转移 (与Github同步)&quot;,      value:        &quot;https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/config/ACL4SSR_Online_Mini_Fallback.ini&quot;    &#125;,    &#123;      label: &quot;ACL4SSR_Online_Mini_MultiMode.ini 精简版 自动测速、故障转移、负载均衡 (与Github同步)&quot;,      value:        &quot;https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/config/ACL4SSR_Online_Mini_MultiMode.ini&quot;    &#125;,    &#123;      label: &quot;ACL4SSR_Online_Full 全分组 重度用户使用 (与Github同步)&quot;,      value:        &quot;https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/config/ACL4SSR_Online_Full.ini&quot;    &#125;,    &#123;      label: &quot;ACL4SSR_Online_Full_NoAuto.ini 全分组 无自动测速 重度用户使用 (与Github同步)&quot;,      value:        &quot;https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/config/ACL4SSR_Online_Full_NoAuto.ini&quot;    &#125;,    &#123;      label: &quot;ACL4SSR_Online_Full_AdblockPlus 全分组 重度用户使用 更多去广告 (与Github同步)&quot;,      value:        &quot;https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/config/ACL4SSR_Online_Full_AdblockPlus.ini&quot;    &#125;,    &#123;      label: &quot;ACL4SSR_Online_Full_Netflix 全分组 重度用户使用 奈飞全量 (与Github同步)&quot;,      value:        &quot;https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/config/ACL4SSR_Online_Full_Netflix.ini&quot;    &#125;,    &#123;      label: &quot;ACL4SSR 本地 默认版 分组比较全&quot;,      value: &quot;config/ACL4SSR.ini&quot;    &#125;,    &#123;      label: &quot;ACL4SSR_Mini 本地 精简版&quot;,      value: &quot;config/ACL4SSR_Mini.ini&quot;    &#125;,    &#123;      label: &quot;ACL4SSR_Mini_NoAuto.ini 本地 精简版+无自动测速&quot;,      value: &quot;config/ACL4SSR_Mini_NoAuto.ini&quot;    &#125;,    &#123;      label: &quot;ACL4SSR_Mini_Fallback.ini 本地 精简版+fallback&quot;,      value: &quot;config/ACL4SSR_Mini_Fallback.ini&quot;    &#125;,    &#123;      label: &quot;ACL4SSR_BackCN 本地 回国&quot;,      value: &quot;config/ACL4SSR_BackCN.ini&quot;    &#125;,    &#123;      label: &quot;ACL4SSR_NoApple 本地 无苹果分流&quot;,      value: &quot;config/ACL4SSR_NoApple.ini&quot;    &#125;,    &#123;      label: &quot;ACL4SSR_NoAuto 本地 无自动测速 &quot;,      value: &quot;config/ACL4SSR_NoAuto.ini&quot;    &#125;,    &#123;      label: &quot;ACL4SSR_NoAuto_NoApple 本地 无自动测速&amp;无苹果分流&quot;,      value: &quot;config/ACL4SSR_NoAuto_NoApple.ini&quot;    &#125;,    &#123;      label: &quot;ACL4SSR_NoMicrosoft 本地 无微软分流&quot;,      value: &quot;config/ACL4SSR_NoMicrosoft.ini&quot;    &#125;,    &#123;      label: &quot;ACL4SSR_WithGFW 本地 GFW列表&quot;,      value: &quot;config/ACL4SSR_WithGFW.ini&quot;    &#125;  ]&#125;,\n打包发布先停止试运行站点Ctrl+C 然后开始打包程序（会消耗一会时间，建议开screen运行）cd sub-webyarn build\n执行完毕后，会在 /root/sub-web 下面会生成一个 dist 目录，这个目录即为网页的发布目录。\n放入网站目录配置SSL等（由于静态网页运行所以测试开的端口8080可以关闭了）\n\n\n3. 部署后端\n拉取后端程序cd /root/wget https://github.com/tindy2013/subconverter/releases/download/v0.6.3/subconverter_linux64.tar.gztar -zxvf subconverter_linux64.tar.gzcd subconverter/\n修改配置文件打开/root/subconverter/pref.ini文件 搜索配置项并修改api_access_token=123456789abcdefg     \t       #随意设置自己知道就行managed_config_prefix=https://suc.*******.com    #设置成我们刚刚解析的后端域名listen=127.0.0.1                  \t\t       #这里改成 127.0.0.1 进行反代port=25500 \t\t\t\t\t\t\t\t\t  #这里是后端要使用的端口号，随意更改，记得防火墙放行\n设置服务启动项打开/etc/systemd/system目录 创建sub.service文件 写入[Unit]Description=Subscription Convert APIAfter=network.target[Service]Type=simpleExecStart=/root/subconverter/subconverterWorkingDirectory=/root/subconverterRestart=alwaysRestartSec=10[Install]WantedBy=multi-user.target\n检查运行状态以及设置开机自启systemctl daemon-reloadsystemctl start subsystemctl enable subsystemctl status sub\n然后为后端域名设置反代localhost:25500(默认端口没改变的话)状态无误可访问域名 https://suc.*****.com/测试\n\n\n至此搭建完毕\n"},{"title":"配置Mosh的一次记录","url":"/lilyblessing.github.io/2021/06/17/%E9%85%8D%E7%BD%AEMosh%E7%9A%84%E4%B8%80%E6%AC%A1%E8%AE%B0%E5%BD%95/","content":"使用mosh来优化ssh连接笔者日常使用的是广电网，极其不稳定的网络连接导致一个网络波动就能掉线。由于SSH采用不可持续的连接，当网络出现波动时，SSH断开会导致当前正在运行的服务中断，对工作产生非常大的影响。无意间知道了Mosh这个东西，安装使用下，发现网络波动这种事情不会导致服务器连接断开了，特意查了下，原来Mosh使用的是UDP方式传输：虽然也支持使用SSH配置进行认证登录，但是数据传输本身是使用UDP方式的，Mosh支持在会话中断时，不会立即退出，而是启用一个计时器，当网络恢复后会自动连接，同时会延续之前的会话，不会重新开启一个。实在是帮大忙了。\n安装mosh1. 在服务器端安装安装以笔者使用的CentOS7系统为例\n$ yum install -y epel-release$ yum install -y mosh \n\nmosh使用的默认端口号UDP的60000-61000，很明显这个范围太大了，不合适也不安全。我们只放行60000-60010区间的udp端口即可。\n\n如果是iptables$ iptables -I INPUT 1 -p udp --dport 60000:60010 -j ACCEPT\n如果是firewall$ firewall-cmd --permanent --zone=public --add-port=60000-60010/udp\n\n2. 在客户端使用\n如果默认端口号22没有改变，则只需要将原ssh改为mosh，mosh会自动接管ssh的配置(因此原ssh所用的端口号不能关闭)\n\n$ mosh root@192.168.**.**\n\n\n如果ssh默认端口号改变了，就需要指定端口号，这里ssh端口号为123\n\n$ mosh --ssh=&quot;ssh -p 123&quot; root@192.168.**.**\n\n\n只开启了一个或者几个mosh端口，需要指定端口号mosh端口号\n\n$ mosh -p 60010 --ssh=&quot;ssh -p 123&quot; root@192.168.**.**\n\n\n不用密码使用秘钥登录 需要将服务器与本机的密钥的目录写好\n\nmosh -p 60010 --ssh=&quot;/usr/bin/ssh -i /home/ivo/.ssh/id_rsa&quot; root@192.168.**.**\n\n这里推荐一个终端 FluentTerminal这个终端采用fluent设计，界面很美观，而且原生支持mosh连接，感兴趣的朋友可以自行安装体验\n"}]